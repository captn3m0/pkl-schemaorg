module org.schema.experimental
import "package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri@1.0.3#/URI.pkl" as URL
import "Thing.pkl"
/// An action performed by a direct agent and indirect participants upon a direct object.
/// Optionally happens at a location with the help of an inanimate instrument. The execution
/// of the action may produce a result. Specific action sub-type documentation specifies
/// the exact expectation of each argument/role. See also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html)
/// and [Actions overview document](https://schema.org/docs/actions.html).
///
/// See: <https://schema.org/Action>
/// Model depth: 2
open class Action extends Thing.Thing {
        
    /// Indicates the current disposition of the Action.
    actionStatus: (Listing<String>|String)?
        
    /// The location of, for example, where an event is happening, where an organization is located,
    /// or where an action takes place.
    location: (Listing<String>|String)?
        
    /// The object upon which the action is carried out, whose state is kept intact or changed.
    /// Also known as the semantic roles patient, affected or undergoer (which change their
    /// state) or theme (which doesn't). E.g. John read *a book*.
    object: (Listing<String>|String)?
        
    /// For failed actions, more information on the cause of the failure.
    error: (Listing<String>|String)?
        
    /// The service provider, service operator, or service performer; the goods producer.
    /// Another party (a seller) may offer those services or goods on behalf of the provider.
    /// A provider may also serve as the seller.
    provider: (Listing<String>|String)?
        
    /// The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),
    /// the time that it is expected to start. For actions that span a period of time, when the action
    /// was performed. E.g. John wrote a book from *January* to December. For media, including
    /// audio and video, it's the time offset of the start of a clip within a larger file. Note that
    /// Event uses startDate/endDate instead of startTime/endTime, even when describing
    /// dates with times. This situation may be clarified in future revisions.
    startTime: (Listing<String|String>|String|String)?
        
    /// The direct performer or driver of the action (animate or inanimate). E.g. *John* wrote
    /// a book.
    agent: (Listing<String>|String)?
        
    /// Indicates a target EntryPoint, or url, for an Action.
    target: (Listing<URL|String>|URL|String)?
        
    /// The object that helped the agent perform the action. E.g. John wrote a book with *a pen*.
    instrument: (Listing<String>|String)?
        
    /// The result produced in the action. E.g. John wrote *a book*.
    result: (Listing<String>|String)?
        
    /// Other co-agents that participated in the action indirectly. E.g. John wrote a book with
    /// *Steve*.
    participant: (Listing<String>|String)?
        
    /// The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),
    /// the time that it is expected to end. For actions that span a period of time, when the action
    /// was performed. E.g. John wrote a book from January to *December*. For media, including
    /// audio and video, it's the time offset of the end of a clip within a larger file. Note that
    /// Event uses startDate/endDate instead of startTime/endTime, even when describing
    /// dates with times. This situation may be clarified in future revisions.
    endTime: (Listing<String|String>|String|String)?
    
}