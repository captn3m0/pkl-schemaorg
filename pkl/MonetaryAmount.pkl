module org.schema.experimental
import "package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri@1.0.3#/URI.pkl" as URL
import "StructuredValue.pkl"
/// A monetary value or range. This type can be used to describe an amount of money such as $50
/// USD, or a range as in describing a bank account being suitable for a balance between £1,000
/// and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]]
/// Types to describe the price of an Offer, Invoice, etc.
///
/// See: <https://schema.org/MonetaryAmount>
/// Model depth: 4
open class MonetaryAmount extends StructuredValue.StructuredValue {
        
    /// The value of a [[QuantitativeValue]] (including [[Observation]]) or property value
    /// node. * For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for
    /// values is 'Number'. * For [[PropertyValue]], it can be 'Text', 'Number', 'Boolean',
    /// or 'StructuredValue'. * Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030)
    /// to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols. * Use
    /// '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid
    /// using these symbols as a readability separator.
    value: (Listing<Int|Float|String|Boolean>|Int|Float|String|Boolean)?
        
    /// The upper value of some characteristic or property.
    maxValue: (Listing<Int|Float|String>|Int|Float|String)?
        
    /// The currency in which the monetary amount is expressed. Use standard formats: [ISO 4217
    /// currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker
    /// symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies,
    /// e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)
    /// (LETS) and other currency types, e.g. "Ithaca HOUR".
    currency: (Listing<String>|String)?
        
    /// The lower value of some characteristic or property.
    minValue: (Listing<Int|Float|String>|Int|Float|String)?
        
    /// The date after when the item is not valid. For example the end of an offer, salary period,
    /// or a period of opening hours.
    validThrough: (Listing<String|String>|String|String)?
        
    /// The date when the item becomes valid.
    validFrom: (Listing<String|String>|String|String)?
    
}